// Code generated by MockGen. DO NOT EDIT.
// Source: file.go
//
// Generated by this command:
//
//	mockgen -source=file.go -destination=./mock_repository/file.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/StudioPrimo/noteref/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIFileRepository is a mock of IFileRepository interface.
type MockIFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIFileRepositoryMockRecorder
}

// MockIFileRepositoryMockRecorder is the mock recorder for MockIFileRepository.
type MockIFileRepositoryMockRecorder struct {
	mock *MockIFileRepository
}

// NewMockIFileRepository creates a new mock instance.
func NewMockIFileRepository(ctrl *gomock.Controller) *MockIFileRepository {
	mock := &MockIFileRepository{ctrl: ctrl}
	mock.recorder = &MockIFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileRepository) EXPECT() *MockIFileRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIFileRepository) Create(ctx context.Context, file *model.File) (*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, file)
	ret0, _ := ret[0].(*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIFileRepositoryMockRecorder) Create(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIFileRepository)(nil).Create), ctx, file)
}

// Delete mocks base method.
func (m *MockIFileRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIFileRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIFileRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockIFileRepository) GetByID(ctx context.Context, id string) (*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIFileRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIFileRepository)(nil).GetByID), ctx, id)
}
